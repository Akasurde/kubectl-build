#!/usr/bin/env sh
set -e
export DOCKER_CONFIG=${KUBECTL_BUILD_DOCKER_CONFIG:-${DOCKER_CONFIG:-$HOME/.docker/config.json}}
export KUBECONFIG="${KUBECTL_BUILD_KUBECONFIG:-$KUBECONFIG}"
kubectl=kubectl
context=""
generator=""
digestfile=""
imagenamewithdigestfile=""
nodefaultctx=0
nodefaultns=0
args="[ "
while [ $# -gt 0 ]; do
  key="$1"

  case $key in
  -c | --context)
    context="$2"
    shift
    shift
    ;;
  --context=*)
    context="${key##*=}"
    shift
    ;;
  --digest-file)
    digestfile="$2"
    shift
    shift
    ;;
  --digest-file=*)
    digestfile="${key##*=}"
    shift
    ;;
  --image-name-with-digest-file)
    imagenamewithdigestfile="$2"
    shift
    shift
    ;;
  --image-name-with-digest-file=*)
    imagenamewithdigestfile="${key##*=}"
    shift
    ;;
  --kubecontext)
    nodefaultctx=1
    kubectl="$kubectl --context $2"
    shift
    shift
    ;;
  --kubecontext=*)
    nodefaultctx=1
    kubectl="$kubectl --context=${key##*=}"
    shift
    ;;
  --kubeconfig)
    kubectl="$kubectl --kubeconfig $2"
    shift
    shift
    ;;
  --kubeconfig=*)
    kubectl="$kubectl --kubeconfig=${key##*=}"
    shift
    ;;
  -n | --namespace)
    nodefaultns=1
    kubectl="$kubectl --namespace $2"
    shift
    shift
    ;;
  --namespace=*)
    nodefaultns=1
    kubectl="$kubectl --namespace=${key##*=}"
    shift
    ;;
  *)
    args="$args\"$1\", "
    shift
    ;;
  esac
done

# Set the default context and namespace to avoid situations where the user switch them during the build process
[ "$nodefaultctx" = 1 ] || kubectl="$kubectl --context=${KUBECTL_BUILD_CONTEXT:-$(kubectl config current-context)}"
[ "$nodefaultns" = 1 ] || kubectl="$kubectl --namespace=${KUBECTL_BUILD_NAMESPACE:-$(kubectl config view --minify --output 'jsonpath={.contexts..namespace}')}"

if [ -n "$digestfile" ] || [ -n "$imagenamewithdigestfile" ]; then
  args="$args\"--image-name-with-digest-file=/dev/termination-log\""
else
  args="$args\"--image-name-with-digest-file=\""
fi

if [ -z "$context" ]; then
  args="$args ]"
elif [ -d "$context" ]; then
  args="$args, \"--context=tar://stdin\" ]"
else
  args="$args, \"--context=$context\" ]"
fi

image="${KUBECTL_BUILD_IMAGE:-gcr.io/kaniko-project/executor:v1.6.0}"
name="${KUBECTL_BUILD_NAME_OVERRIDE:-kaniko-$(env LC_ALL=C tr -dc a-z0-9 </dev/urandom | head -c 6)}"

overrides="$(
  cat <<EOT
{
  "metadata": ${KUBECTL_BUILD_METADATA_OVERRIDES:-"{}"},
  "spec": {
    "containers": [
      {
        "image": "$image",
        "name": "kaniko",
        "stdin": true,
        "stdinOnce": true,
        "terminationMessagePath": "/dev/termination-log",
        "terminationMessagePolicy": "File",
        "args": $args
      }
    ],
    "automountServiceAccountToken": false,
    "enableServiceLinks": false
  }
}
EOT
)"

# Support Kubectl <1.18
m=$(kubectl version --client -o yaml | awk -F'[ :"]+' '$2 == "minor" {print $3+0}')
if [ "$m" -lt 18 ]; then
  generator="--generator=run-pod/v1"
fi

# Support bsdtar as well
m=$(tar --version | awk '{print $1; exit}')
if [ "$m" != "bsdtar" ]; then
  tarf() {
    if [ -f "$DOCKER_CONFIG" ]; then
      tar -P --transform "s|^${DOCKER_CONFIG}|../.docker/config.json|" --record-size=100K --checkpoint=1 --checkpoint-action='ttyout=Sending build context to Kaniko %{r}T\r' --exclude-ignore=.dockerignore "$@" "$DOCKER_CONFIG"
    else
      tar -P --record-size=100K --checkpoint=1 --checkpoint-action='ttyout=Sending build context to Kaniko %{r}T\r' --exclude-ignore=.dockerignore "$@"
    fi
  }
else
  tarf() {
    if [ -f "$DOCKER_CONFIG" ]; then
      tar -P -s "|^${DOCKER_CONFIG}|../.docker/config.json|" "$@" "$DOCKER_CONFIG"
    else
      tar -P "$@"
    fi
  }
fi

if [ -n "$context" ] && ([ ! -d "$context" ] && [ "$context" != "tar://stdin" ]); then
  echo "Error: $context: Cannot open: Not a directory" >&2
  exit 1
fi

if [ "$KUBECTL_BUILD_KEEP_POD" != "true" ]; then
  trap "EC=\$?; $kubectl delete pod "$name" --wait=false 2>/dev/null || true; exit \$EC" EXIT INT TERM
fi

echo "spawning \"$name\""
if [ -n "$context" ] && [ "$context" != "tar://stdin" ]; then
  tarf -C "$context" -czf - . |
    $kubectl run --image "$image" --restart=Never --overrides="$overrides" -i "$name" $generator
else
  $kubectl run --image "$image" --restart=Never --overrides="$overrides" -i "$name" $generator
fi

# Retrieve digest file
if [ $? -eq 0 ] && ([ -n "$digestfile" ] || [ -n "$imagenamewithdigestfile" ]); then
  imagenamewithdigest=$($kubectl get pod "$name" -o go-template='{{ range .status.containerStatuses }}{{ with .state.terminated.message }}{{ . }}{{ end }}{{ end }}')
  if [ -z "$imagenamewithdigest" ]; then
    echo "Error: termination message is missing" >&2
    exit 2
  fi
  digest=${imagenamewithdigest##*@}
  [ -z "$digestfile" ] || printf "%s" "$digest" >"$digestfile"
  [ -z "$imagenamewithdigestfile" ] || printf "%s\n" "$imagenamewithdigest" >"$imagenamewithdigestfile"
fi
